@model Project1.WebApp.ViewModels.StoreViewModel

@{
    ViewData["Title"] = "Edit Store";
}

<h1>Edit Store</h1>

<hr />
<form asp-action="Edit">
    <div class="row">
        <div class="col-md-4">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
        </div>
    </div>

    <b> @Html.DisplayNameFor(model => model.Address) </b>
    @{Html.RenderPartial("PartialAddress", Model.Address);}

    <div class="form-group">
        @* use a dropdown (<select>) to choose an address. *@
        <label asp-for="Address" class="control-label"></label>
        <select asp-for="Address.Id"
                asp-items="@(new SelectList(Model.Addresses, "Id", "Street"))" selected="@Model.Address.Id" class="form-control"></select>
    </div>

    <b> @Html.DisplayNameFor(model => model.StoreItems) </b>
    @{Html.RenderPartial("PartialStoreItems", Model.StoreItems);}

    @* Add inventory items *@
    <div>
        <b>Update Inventory</b>
        <br />
        @for (var i = 0; i < Model.Ingredients.Count; i++)
        {
            @Html.HiddenFor(m => Model.Ingredients[i].Id)
            @Html.HiddenFor(m => Model.Ingredients[i].Name)
            @Html.CheckBoxFor(m => Model.Ingredients[i].Checked)
            @Model.Ingredients[i].Name
            @Html.EditorFor(m => Model.IngredientsAmount[i].Quantity)

            <br />
        }
    </div>

    <b> @Html.DisplayNameFor(model => model.Orders) </b>
    @{Html.RenderPartial("PartialStoreOrderHist", Model.Orders);}

    <div class="form-group">
        <input type="submit" value="Save" class="btn btn-primary" />
    </div>
</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
